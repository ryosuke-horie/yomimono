name: CI (GitHub-hosted Runner)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# 同一ブランチでの並列実行を制限
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true

jobs:
  # E2E テスト（フロントエンド）- 軽量化版
  frontend-e2e:
    name: Frontend E2E Tests (Chrome Only)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          api/package-lock.json

    - name: Install frontend dependencies
      run: npm ci

    - name: Install API dependencies
      working-directory: ./api
      run: npm ci

    - name: Install Playwright (Chrome only)
      run: |
        # Chromeのみインストールして軽量化
        npx playwright install chromium
        npx playwright install-deps chromium

    - name: Setup environment for E2E
      run: |
        # Create .env file for E2E tests
        echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:8787" > .env

    - name: Start test servers
      run: |
        # バックグラウンドでサーバー起動
        npm run servers:start &
        SERVER_PID=$!
        echo "Server process started with PID: $SERVER_PID"
        
        # サーバー起動の待機（最大60秒）
        echo "Waiting for servers to start..."
        for i in {1..60}; do
          sleep 1
          if curl -s http://localhost:3000 >/dev/null 2>&1 && curl -s http://localhost:8787/health >/dev/null 2>&1; then
            echo "✅ Both servers are ready after ${i} seconds"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "❌ Servers failed to start within 60 seconds"
            echo "Frontend status:"
            curl -I http://localhost:3000 || echo "Frontend not accessible"
            echo "API status:"
            curl -I http://localhost:8787/health || echo "API not accessible"
            exit 1
          fi
        done
      env:
        NODE_ENV: test

    - name: Run E2E tests (Chrome only, essential scenarios)
      run: |
        # 軽量化：必須シナリオのみ実行（CI環境では自動的にchromiumのみ）
        npx playwright test e2e/tests/essential-scenarios.spec.ts
      env:
        CI: true

    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-results
        path: |
          ./frontend/test-results/
          ./frontend/playwright-report/
        retention-days: 7

  # ビルドテスト
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        project: [api, frontend]

    defaults:
      run:
        working-directory: ./${{ matrix.project }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: ${{ matrix.project }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Setup environment (Frontend)
      if: matrix.project == 'frontend'
      run: |
        # Create .env file for build
        echo "NEXT_PUBLIC_API_BASE_URL=http://localhost:8787" > .env
        
        # Create CI-specific next.config.mjs (without Cloudflare dev setup)
        cat > next.config.ci.mjs << 'EOF'
/** @type {import('next').NextConfig} */
const nextConfig = {};
export default nextConfig;
EOF

    - name: Build project (API)
      if: matrix.project == 'api'
      run: |
        # Wranglerビルドのテスト（実際のデプロイはしない）
        echo "Testing Wrangler build configuration..."
        npx wrangler dev --port 8788 --env development &
        WRANGLER_PID=$!
        sleep 5
        kill $WRANGLER_PID 2>/dev/null || true
        echo "✅ Wrangler build test completed"

    - name: Build project (Frontend)
      if: matrix.project == 'frontend'
      run: |
        # Use CI-specific next config for build
        mv next.config.mjs next.config.original.mjs
        mv next.config.ci.mjs next.config.mjs
        npm run build
        # Restore original config
        mv next.config.mjs next.config.ci.mjs
        mv next.config.original.mjs next.config.mjs

    - name: Upload build artifacts
      if: matrix.project == 'frontend'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: ./frontend/.next/
        retention-days: 3

  # 統合結果レポート
  integration-summary:
    name: GitHub-hosted Integration Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [frontend-e2e, build-tests]
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate test summary
      run: |
        echo "## GitHub-hosted CI Results Summary" > test-summary.md
        echo "" >> test-summary.md
        
        # 各ジョブの結果を集計
        echo "### Test Results" >> test-summary.md
        echo "- Frontend E2E Tests: ${{ needs.frontend-e2e.result }}" >> test-summary.md
        echo "- Build Tests: ${{ needs.build-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "**Note**: Lint, unit tests, and security audit run on self-hosted runners separately" >> test-summary.md
        echo "" >> test-summary.md
        
        # ブランチ情報
        echo "### Build Information" >> test-summary.md
        echo "- Branch: \`${{ github.ref_name }}\`" >> test-summary.md
        echo "- Commit: \`${{ github.sha }}\`" >> test-summary.md
        echo "- Triggered by: ${{ github.event_name }}" >> test-summary.md
        echo "- Runner: GitHub-hosted (ubuntu-latest)" >> test-summary.md
        
        cat test-summary.md

    - name: Upload summary
      uses: actions/upload-artifact@v4
      with:
        name: github-hosted-ci-summary
        path: test-summary.md
        retention-days: 30

    - name: Job status check
      run: |
        if [[ "${{ needs.frontend-e2e.result }}" == "failure" ]] || \
           [[ "${{ needs.build-tests.result }}" == "failure" ]]; then
          echo "❌ GitHub-hosted CI failed - one or more jobs failed"
          exit 1
        else
          echo "✅ All GitHub-hosted CI jobs completed successfully"
        fi